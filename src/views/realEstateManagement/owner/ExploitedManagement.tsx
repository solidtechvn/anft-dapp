import CIcon from '@coreui/icons-react';
import {
  CBadge,
  CButton,
  CCard,
  CCardBody,
  CCardTitle,
  CCol,
  CContainer,
  CDataTable,
  CForm,
  CInput,
  CInvalidFeedback,
  CLabel,
  CRow
} from '@coreui/react';
import { Formik } from 'formik';
import React, { useState } from 'react';
import * as Yup from 'yup';
import bgImg from '../../../assets/img/registerBonus.svg';
import { ExploitedStatus, mapExploitedStatusBadge } from '../../../enumeration/exploitedStatus';
import ConfirmModal from '../../../shared/components/ConfirmModal';
import { IExploitedPermission } from '../../../shared/models/exploitedPermission.model';

const ExploitedManagement = () => {
  const titleTableStyle = {
    textAlign: 'left',
    color: '#828282',
    fontSize: '0.875rem',
    lineHeight: '16px',
    fontWeight: '400',
  };
  const fields = [
    { key: 'address', _style: titleTableStyle, label: 'Address' },
    { key: 'status', _style: titleTableStyle, label: 'Status' },
    { key: 'action', _style: titleTableStyle, label: 'Action' },
  ];

  const demoExploitedPermission: IExploitedPermission[] = [
    {
      createdDate: '17:10- 29/11/2021',
      status: ExploitedStatus.Active,
      address: '0xda3ac...9999',
    },
    {
      createdDate: '17:10- 29/11/2021',
      status: ExploitedStatus.Inactive,
      address: '0xda3ac...9999',
    },
    {
      createdDate: '17:10- 29/11/2021',
      status: ExploitedStatus.Active,
      address: '0xda3ac...9999',
    },
  ];

  const [addExploitedPermission, setAddExploitedPermission] = useState<boolean>(false);
  const [cancelExploitedPermission, setCancelExploitedPermission] = useState<boolean>(false);

  const setAddExploitedPermissionListener = (key: boolean) => (): void => setAddExploitedPermission(key);
  const setCancelExploitedPermissionListener = (key: boolean) => (): void => setCancelExploitedPermission(key);

  const initialValues = {
    address: '',
  };

  const validationSchema = Yup.object().shape({
    address: Yup.string().required('Địa chỉ ví không hợp lệ'),
  });

  const onCloseModal = () => {
    setAddExploitedPermission(false);
    setCancelExploitedPermission(false);
  }

  return (
    <CContainer fluid className="mx-0 my-2">
      <CRow>
        <CCol xs={12}>
          <CLabel className="text-primary content-title">Danh sách quyền khai thác</CLabel>
        </CCol>
        <CCol xs={12}>
          <CCard className="m-0 rb-card-img">
            <img src={bgImg} alt="realEstateImg" className="w-100 h-100" />
            <CCardBody className="p-0 rb-card-body">
              <CCardTitle className="rb-card-title mb-0 px-3 py-2 w-100">
                <p className="mb-2 text-white content-title">125 - Hoàn Kiếm - Hà Nội</p>
                <p className="mb-0 text-white detail-title-font">
                  Hoạt động <b>03</b>
                </p>
              </CCardTitle>
            </CCardBody>
          </CCard>
        </CCol>
        <CCol xs={12}>
          <CDataTable
            striped
            items={demoExploitedPermission.filter((e) => e.status === ExploitedStatus.Active)}
            fields={fields}
            responsive
            hover
            header
            scopedSlots={{
              status: (item: IExploitedPermission) => {
                return (
                  <td>
                    {<CBadge color={mapExploitedStatusBadge[item.status]}>{item.status ? item.status : '_'}</CBadge>}
                  </td>
                );
              },
              action: (item: IExploitedPermission) => {
                return (
                  <td>
                    <CButton className="text-danger p-0" onClick={setCancelExploitedPermissionListener(true)}>
                      <CIcon name="cil-trash" />
                    </CButton>
                    <ConfirmModal
                      isVisible={cancelExploitedPermission}
                      setVisible={setCancelExploitedPermission}
                      color="danger"
                      title="Hủy quyền khai thác"
                      CustomJSX={() => (
                        <p>
                          Bạn chắc chắn muốn hủy quyền khai thác của{' '}
                          <span className="text-primary">{item.address}</span>
                        </p>
                      )}
                      onConfirm={() => {}}
                      onAbort={onCloseModal}
                    />
                  </td>
                );
              },
            }}
          />

          {/* <CancelExploitedPermission
            visible={cancelExploitedPermission}
            setVisible={setCancelExploitedPermission}
            address="12abcx3343..."
          /> */}
        </CCol>
        <CCol xs={12} className="d-flex justify-content-center">
          <CButton
            className="my-2 px-3 w-100 btn-radius-50 btn-font-style btn-primary"
            onClick={setAddExploitedPermissionListener(true)}
          >
            Thêm quyền sở hữu
          </CButton>
        </CCol>
        {/* <AddExploitedPermission visible={addExploitedPermission} setVisible={setAddExploitedPermission} /> */}
        <ConfirmModal
          isVisible={addExploitedPermission}
          setVisible={setAddExploitedPermission}
          color="primary"
          title="Thêm quyền khai thác"
          CustomJSX={() => (
            <Formik
              enableReinitialize
              initialValues={initialValues}
              validationSchema={validationSchema}
              onSubmit={(values) => {}}
            >
              {({ values, errors, touched, handleChange, handleSubmit, handleBlur }) => (
                <CForm onSubmit={handleSubmit}>
                  <CRow>
                    <CCol xs={12}>
                      <p>Address Wallet</p>
                    </CCol>
                    <CCol xs={12}>
                      <CInput
                        type="text"
                        id="address"
                        name="address"
                        onChange={handleChange}
                        autoComplete="off"
                        value={values.address || ''}
                        onBlur={handleBlur}
                        className="btn-radius-50"
                      />
                      <CInvalidFeedback className={!!errors.address && touched.address ? 'd-block' : 'd-none'}>
                        {errors.address}
                      </CInvalidFeedback>
                    </CCol>
                  </CRow>
                </CForm>
              )}
            </Formik>
          )}
          onConfirm={() => {}}
          onAbort={onCloseModal}
          />
      </CRow>
    </CContainer>
  );
};

export default ExploitedManagement;
