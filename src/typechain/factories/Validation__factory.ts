/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Validation, ValidationInterface } from "../Validation";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "Message",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101dc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063469c811014610030575b600080fd5b61004361003e366004610097565b610045565b005b7f811f7cff0a3374ff67cccc3726035d34ba70410e0256818a891e4d6acc01d88e3382604051610076929190610148565b60405180910390a150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100a957600080fd5b813567ffffffffffffffff808211156100c157600080fd5b818401915084601f8301126100d557600080fd5b8135818111156100e7576100e7610081565b604051601f8201601f19908116603f0116810190838211818310171561010f5761010f610081565b8160405282815287602084870101111561012857600080fd5b826020860160208301376000928101602001929092525095945050505050565b60018060a01b038316815260006020604081840152835180604085015260005b8181101561018457858101830151858201606001528201610168565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220ccb5498cbd06450c7cbf125211694e0cdf0b1414218ffa208926373f2db0d42564736f6c63430008110033";

export class Validation__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Validation> {
    return super.deploy(overrides || {}) as Promise<Validation>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Validation {
    return super.attach(address) as Validation;
  }
  connect(signer: Signer): Validation__factory {
    return super.connect(signer) as Validation__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidationInterface {
    return new utils.Interface(_abi) as ValidationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Validation {
    return new Contract(address, _abi, signerOrProvider) as Validation;
  }
}
